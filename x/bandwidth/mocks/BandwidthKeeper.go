// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import authtypes "github.com/cosmos/cosmos-sdk/x/auth/types"

import linotypes "github.com/lino-network/lino/types"
import mock "github.com/stretchr/testify/mock"
import model "github.com/lino-network/lino/x/bandwidth/model"
import types "github.com/cosmos/cosmos-sdk/types"

// BandwidthKeeper is an autogenerated mock type for the BandwidthKeeper type
type BandwidthKeeper struct {
	mock.Mock
}

// BeginBlocker provides a mock function with given fields: ctx
func (_m *BandwidthKeeper) BeginBlocker(ctx types.Context) types.Error {
	ret := _m.Called(ctx)

	var r0 types.Error
	if rf, ok := ret.Get(0).(func(types.Context) types.Error); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Error)
		}
	}

	return r0
}

// CheckBandwidth provides a mock function with given fields: ctx, addr, fee
func (_m *BandwidthKeeper) CheckBandwidth(ctx types.Context, addr types.AccAddress, fee authtypes.StdFee) types.Error {
	ret := _m.Called(ctx, addr, fee)

	var r0 types.Error
	if rf, ok := ret.Get(0).(func(types.Context, types.AccAddress, authtypes.StdFee) types.Error); ok {
		r0 = rf(ctx, addr, fee)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Error)
		}
	}

	return r0
}

// DecayMaxMPS provides a mock function with given fields: ctx
func (_m *BandwidthKeeper) DecayMaxMPS(ctx types.Context) types.Error {
	ret := _m.Called(ctx)

	var r0 types.Error
	if rf, ok := ret.Get(0).(func(types.Context) types.Error); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Error)
		}
	}

	return r0
}

// EndBlocker provides a mock function with given fields: ctx
func (_m *BandwidthKeeper) EndBlocker(ctx types.Context) types.Error {
	ret := _m.Called(ctx)

	var r0 types.Error
	if rf, ok := ret.Get(0).(func(types.Context) types.Error); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Error)
		}
	}

	return r0
}

// GetAppBandwidthInfo provides a mock function with given fields: ctx, accKey
func (_m *BandwidthKeeper) GetAppBandwidthInfo(ctx types.Context, accKey linotypes.AccountKey) (*model.AppBandwidthInfo, types.Error) {
	ret := _m.Called(ctx, accKey)

	var r0 *model.AppBandwidthInfo
	if rf, ok := ret.Get(0).(func(types.Context, linotypes.AccountKey) *model.AppBandwidthInfo); ok {
		r0 = rf(ctx, accKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AppBandwidthInfo)
		}
	}

	var r1 types.Error
	if rf, ok := ret.Get(1).(func(types.Context, linotypes.AccountKey) types.Error); ok {
		r1 = rf(ctx, accKey)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(types.Error)
		}
	}

	return r0, r1
}

// GetBandwidthInfo provides a mock function with given fields: ctx
func (_m *BandwidthKeeper) GetBandwidthInfo(ctx types.Context) (*model.BandwidthInfo, types.Error) {
	ret := _m.Called(ctx)

	var r0 *model.BandwidthInfo
	if rf, ok := ret.Get(0).(func(types.Context) *model.BandwidthInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.BandwidthInfo)
		}
	}

	var r1 types.Error
	if rf, ok := ret.Get(1).(func(types.Context) types.Error); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(types.Error)
		}
	}

	return r0, r1
}

// GetBlockInfo provides a mock function with given fields: ctx
func (_m *BandwidthKeeper) GetBlockInfo(ctx types.Context) (*model.BlockInfo, types.Error) {
	ret := _m.Called(ctx)

	var r0 *model.BlockInfo
	if rf, ok := ret.Get(0).(func(types.Context) *model.BlockInfo); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.BlockInfo)
		}
	}

	var r1 types.Error
	if rf, ok := ret.Get(1).(func(types.Context) types.Error); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(types.Error)
		}
	}

	return r0, r1
}

// InitGenesis provides a mock function with given fields: ctx
func (_m *BandwidthKeeper) InitGenesis(ctx types.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReCalculateAppBandwidthInfo provides a mock function with given fields: ctx
func (_m *BandwidthKeeper) ReCalculateAppBandwidthInfo(ctx types.Context) types.Error {
	ret := _m.Called(ctx)

	var r0 types.Error
	if rf, ok := ret.Get(0).(func(types.Context) types.Error); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Error)
		}
	}

	return r0
}
