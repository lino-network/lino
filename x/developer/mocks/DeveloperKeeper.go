// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import linotypes "github.com/lino-network/lino/types"
import mock "github.com/stretchr/testify/mock"
import types "github.com/cosmos/cosmos-sdk/types"

// DeveloperKeeper is an autogenerated mock type for the DeveloperKeeper type
type DeveloperKeeper struct {
	mock.Mock
}

// DoesDeveloperExist provides a mock function with given fields: ctx, username
func (_m *DeveloperKeeper) DoesDeveloperExist(ctx types.Context, username linotypes.AccountKey) bool {
	ret := _m.Called(ctx, username)

	var r0 bool
	if rf, ok := ret.Get(0).(func(types.Context, linotypes.AccountKey) bool); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetMiniIDAPrice provides a mock function with given fields: dev
func (_m *DeveloperKeeper) GetMiniIDAPrice(dev linotypes.AccountKey) (linotypes.MiniDollar, types.Error) {
	ret := _m.Called(dev)

	var r0 linotypes.MiniDollar
	if rf, ok := ret.Get(0).(func(linotypes.AccountKey) linotypes.MiniDollar); ok {
		r0 = rf(dev)
	} else {
		r0 = ret.Get(0).(linotypes.MiniDollar)
	}

	var r1 types.Error
	if rf, ok := ret.Get(1).(func(linotypes.AccountKey) types.Error); ok {
		r1 = rf(dev)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(types.Error)
		}
	}

	return r0, r1
}

// MoveIDA provides a mock function with given fields: app, from, to, amount
func (_m *DeveloperKeeper) MoveIDA(app linotypes.AccountKey, from linotypes.AccountKey, to linotypes.AccountKey, amount linotypes.MiniDollar) types.Error {
	ret := _m.Called(app, from, to, amount)

	var r0 types.Error
	if rf, ok := ret.Get(0).(func(linotypes.AccountKey, linotypes.AccountKey, linotypes.AccountKey, linotypes.MiniDollar) types.Error); ok {
		r0 = rf(app, from, to, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Error)
		}
	}

	return r0
}

// ReportConsumption provides a mock function with given fields: ctx, username, consumption
func (_m *DeveloperKeeper) ReportConsumption(ctx types.Context, username linotypes.AccountKey, consumption linotypes.Coin) types.Error {
	ret := _m.Called(ctx, username, consumption)

	var r0 types.Error
	if rf, ok := ret.Get(0).(func(types.Context, linotypes.AccountKey, linotypes.Coin) types.Error); ok {
		r0 = rf(ctx, username, consumption)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Error)
		}
	}

	return r0
}
