// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	linotypes "github.com/lino-network/lino/types"

	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// FakeApp is an autogenerated mock type for the FakeApp type
type FakeApp struct {
	mock.Mock
}

// Daily provides a mock function with given fields: ctx
func (_m *FakeApp) Daily(ctx types.Context) []linotypes.BCEventErr {
	ret := _m.Called(ctx)

	var r0 []linotypes.BCEventErr
	if rf, ok := ret.Get(0).(func(types.Context) []linotypes.BCEventErr); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]linotypes.BCEventErr)
		}
	}

	return r0
}

// Hourly provides a mock function with given fields: ctx
func (_m *FakeApp) Hourly(ctx types.Context) []linotypes.BCEventErr {
	ret := _m.Called(ctx)

	var r0 []linotypes.BCEventErr
	if rf, ok := ret.Get(0).(func(types.Context) []linotypes.BCEventErr); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]linotypes.BCEventErr)
		}
	}

	return r0
}

// Monthly provides a mock function with given fields: ctx
func (_m *FakeApp) Monthly(ctx types.Context) []linotypes.BCEventErr {
	ret := _m.Called(ctx)

	var r0 []linotypes.BCEventErr
	if rf, ok := ret.Get(0).(func(types.Context) []linotypes.BCEventErr); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]linotypes.BCEventErr)
		}
	}

	return r0
}

// Yearly provides a mock function with given fields: ctx
func (_m *FakeApp) Yearly(ctx types.Context) []linotypes.BCEventErr {
	ret := _m.Called(ctx)

	var r0 []linotypes.BCEventErr
	if rf, ok := ret.Get(0).(func(types.Context) []linotypes.BCEventErr); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]linotypes.BCEventErr)
		}
	}

	return r0
}
