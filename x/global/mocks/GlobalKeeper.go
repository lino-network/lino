// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	amino "github.com/tendermint/go-amino"

	linotypes "github.com/lino-network/lino/types"

	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// GlobalKeeper is an autogenerated mock type for the GlobalKeeper type
type GlobalKeeper struct {
	mock.Mock
}

// AddFrictionAndRegisterContentRewardEvent provides a mock function with given fields: ctx, event, friction, evaluate
func (_m *GlobalKeeper) AddFrictionAndRegisterContentRewardEvent(ctx types.Context, event linotypes.Event, friction linotypes.Coin, evaluate linotypes.MiniDollar) types.Error {
	ret := _m.Called(ctx, event, friction, evaluate)

	var r0 types.Error
	if rf, ok := ret.Get(0).(func(types.Context, linotypes.Event, linotypes.Coin, linotypes.MiniDollar) types.Error); ok {
		r0 = rf(ctx, event, friction, evaluate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Error)
		}
	}

	return r0
}

// AddToValidatorInflationPool provides a mock function with given fields: ctx, coin
func (_m *GlobalKeeper) AddToValidatorInflationPool(ctx types.Context, coin linotypes.Coin) types.Error {
	ret := _m.Called(ctx, coin)

	var r0 types.Error
	if rf, ok := ret.Get(0).(func(types.Context, linotypes.Coin) types.Error); ok {
		r0 = rf(ctx, coin)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Error)
		}
	}

	return r0
}

// GetConsumptionFrictionRate provides a mock function with given fields: ctx
func (_m *GlobalKeeper) GetConsumptionFrictionRate(ctx types.Context) (types.Dec, types.Error) {
	ret := _m.Called(ctx)

	var r0 types.Dec
	if rf, ok := ret.Get(0).(func(types.Context) types.Dec); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(types.Dec)
	}

	var r1 types.Error
	if rf, ok := ret.Get(1).(func(types.Context) types.Error); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(types.Error)
		}
	}

	return r0, r1
}

// GetLastBlockTime provides a mock function with given fields: ctx
func (_m *GlobalKeeper) GetLastBlockTime(ctx types.Context) (int64, types.Error) {
	ret := _m.Called(ctx)

	var r0 int64
	if rf, ok := ret.Get(0).(func(types.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 types.Error
	if rf, ok := ret.Get(1).(func(types.Context) types.Error); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(types.Error)
		}
	}

	return r0, r1
}

// GetRewardAndPopFromWindow provides a mock function with given fields: ctx, evaluate
func (_m *GlobalKeeper) GetRewardAndPopFromWindow(ctx types.Context, evaluate linotypes.MiniDollar) (linotypes.Coin, types.Error) {
	ret := _m.Called(ctx, evaluate)

	var r0 linotypes.Coin
	if rf, ok := ret.Get(0).(func(types.Context, linotypes.MiniDollar) linotypes.Coin); ok {
		r0 = rf(ctx, evaluate)
	} else {
		r0 = ret.Get(0).(linotypes.Coin)
	}

	var r1 types.Error
	if rf, ok := ret.Get(1).(func(types.Context, linotypes.MiniDollar) types.Error); ok {
		r1 = rf(ctx, evaluate)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(types.Error)
		}
	}

	return r0, r1
}

// ImportFromFile provides a mock function with given fields: ctx, cdc, filepath
func (_m *GlobalKeeper) ImportFromFile(ctx types.Context, cdc *amino.Codec, filepath string) error {
	ret := _m.Called(ctx, cdc, filepath)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, *amino.Codec, string) error); ok {
		r0 = rf(ctx, cdc, filepath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PopDeveloperMonthlyInflation provides a mock function with given fields: ctx
func (_m *GlobalKeeper) PopDeveloperMonthlyInflation(ctx types.Context) (linotypes.Coin, types.Error) {
	ret := _m.Called(ctx)

	var r0 linotypes.Coin
	if rf, ok := ret.Get(0).(func(types.Context) linotypes.Coin); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(linotypes.Coin)
	}

	var r1 types.Error
	if rf, ok := ret.Get(1).(func(types.Context) types.Error); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(types.Error)
		}
	}

	return r0, r1
}
