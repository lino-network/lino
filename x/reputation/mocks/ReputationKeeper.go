// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	linotypes "github.com/lino-network/lino/types"
	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/types"
)

// ReputationKeeper is an autogenerated mock type for the ReputationKeeper type
type ReputationKeeper struct {
	mock.Mock
}

// DonateAt provides a mock function with given fields: ctx, username, post, amount
func (_m *ReputationKeeper) DonateAt(ctx types.Context, username linotypes.AccountKey, post linotypes.Permlink, amount linotypes.MiniDollar) (linotypes.MiniDollar, types.Error) {
	ret := _m.Called(ctx, username, post, amount)

	var r0 linotypes.MiniDollar
	if rf, ok := ret.Get(0).(func(types.Context, linotypes.AccountKey, linotypes.Permlink, linotypes.MiniDollar) linotypes.MiniDollar); ok {
		r0 = rf(ctx, username, post, amount)
	} else {
		r0 = ret.Get(0).(linotypes.MiniDollar)
	}

	var r1 types.Error
	if rf, ok := ret.Get(1).(func(types.Context, linotypes.AccountKey, linotypes.Permlink, linotypes.MiniDollar) types.Error); ok {
		r1 = rf(ctx, username, post, amount)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(types.Error)
		}
	}

	return r0, r1
}

// ExportToFile provides a mock function with given fields: ctx, file, prevstate
func (_m *ReputationKeeper) ExportToFile(ctx types.Context, file string, prevstate string) error {
	ret := _m.Called(ctx, file, prevstate)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, string, string) error); ok {
		r0 = rf(ctx, file, prevstate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCurrentRound provides a mock function with given fields: ctx
func (_m *ReputationKeeper) GetCurrentRound(ctx types.Context) (int64, types.Error) {
	ret := _m.Called(ctx)

	var r0 int64
	if rf, ok := ret.Get(0).(func(types.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 types.Error
	if rf, ok := ret.Get(1).(func(types.Context) types.Error); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(types.Error)
		}
	}

	return r0, r1
}

// GetReputation provides a mock function with given fields: ctx, username
func (_m *ReputationKeeper) GetReputation(ctx types.Context, username linotypes.AccountKey) (linotypes.MiniDollar, types.Error) {
	ret := _m.Called(ctx, username)

	var r0 linotypes.MiniDollar
	if rf, ok := ret.Get(0).(func(types.Context, linotypes.AccountKey) linotypes.MiniDollar); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(linotypes.MiniDollar)
	}

	var r1 types.Error
	if rf, ok := ret.Get(1).(func(types.Context, linotypes.AccountKey) types.Error); ok {
		r1 = rf(ctx, username)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(types.Error)
		}
	}

	return r0, r1
}

// ImportFromFile provides a mock function with given fields: ctx, file
func (_m *ReputationKeeper) ImportFromFile(ctx types.Context, file string) error {
	ret := _m.Called(ctx, file)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, string) error); ok {
		r0 = rf(ctx, file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx
func (_m *ReputationKeeper) Update(ctx types.Context) types.Error {
	ret := _m.Called(ctx)

	var r0 types.Error
	if rf, ok := ret.Get(0).(func(types.Context) types.Error); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Error)
		}
	}

	return r0
}
