// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	linotypes "github.com/lino-network/lino/types"
	amino "github.com/tendermint/go-amino"

	mock "github.com/stretchr/testify/mock"

	model "github.com/lino-network/lino/x/vote/model"

	types "github.com/cosmos/cosmos-sdk/types"

	votetypes "github.com/lino-network/lino/x/vote/types"
)

// VoteKeeper is an autogenerated mock type for the VoteKeeper type
type VoteKeeper struct {
	mock.Mock
}

// AddStake provides a mock function with given fields: ctx, username, amount
func (_m *VoteKeeper) AddStake(ctx types.Context, username linotypes.AccountKey, amount linotypes.Coin) types.Error {
	ret := _m.Called(ctx, username, amount)

	var r0 types.Error
	if rf, ok := ret.Get(0).(func(types.Context, linotypes.AccountKey, linotypes.Coin) types.Error); ok {
		r0 = rf(ctx, username, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Error)
		}
	}

	return r0
}

// AssignDuty provides a mock function with given fields: ctx, username, duty, frozenAmount
func (_m *VoteKeeper) AssignDuty(ctx types.Context, username linotypes.AccountKey, duty votetypes.VoterDuty, frozenAmount linotypes.Coin) types.Error {
	ret := _m.Called(ctx, username, duty, frozenAmount)

	var r0 types.Error
	if rf, ok := ret.Get(0).(func(types.Context, linotypes.AccountKey, votetypes.VoterDuty, linotypes.Coin) types.Error); ok {
		r0 = rf(ctx, username, duty, frozenAmount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Error)
		}
	}

	return r0
}

// ClaimInterest provides a mock function with given fields: ctx, username
func (_m *VoteKeeper) ClaimInterest(ctx types.Context, username linotypes.AccountKey) types.Error {
	ret := _m.Called(ctx, username)

	var r0 types.Error
	if rf, ok := ret.Get(0).(func(types.Context, linotypes.AccountKey) types.Error); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Error)
		}
	}

	return r0
}

// DoesVoterExist provides a mock function with given fields: ctx, username
func (_m *VoteKeeper) DoesVoterExist(ctx types.Context, username linotypes.AccountKey) bool {
	ret := _m.Called(ctx, username)

	var r0 bool
	if rf, ok := ret.Get(0).(func(types.Context, linotypes.AccountKey) bool); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ExecUnassignDutyEvent provides a mock function with given fields: ctx, event
func (_m *VoteKeeper) ExecUnassignDutyEvent(ctx types.Context, event votetypes.UnassignDutyEvent) types.Error {
	ret := _m.Called(ctx, event)

	var r0 types.Error
	if rf, ok := ret.Get(0).(func(types.Context, votetypes.UnassignDutyEvent) types.Error); ok {
		r0 = rf(ctx, event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Error)
		}
	}

	return r0
}

// ExportToFile provides a mock function with given fields: ctx, cdc, filepath
func (_m *VoteKeeper) ExportToFile(ctx types.Context, cdc *amino.Codec, filepath string) error {
	ret := _m.Called(ctx, cdc, filepath)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, *amino.Codec, string) error); ok {
		r0 = rf(ctx, cdc, filepath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLinoStake provides a mock function with given fields: ctx, username
func (_m *VoteKeeper) GetLinoStake(ctx types.Context, username linotypes.AccountKey) (linotypes.Coin, types.Error) {
	ret := _m.Called(ctx, username)

	var r0 linotypes.Coin
	if rf, ok := ret.Get(0).(func(types.Context, linotypes.AccountKey) linotypes.Coin); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(linotypes.Coin)
	}

	var r1 types.Error
	if rf, ok := ret.Get(1).(func(types.Context, linotypes.AccountKey) types.Error); ok {
		r1 = rf(ctx, username)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(types.Error)
		}
	}

	return r0, r1
}

// GetVoter provides a mock function with given fields: ctx, username
func (_m *VoteKeeper) GetVoter(ctx types.Context, username linotypes.AccountKey) (*model.Voter, types.Error) {
	ret := _m.Called(ctx, username)

	var r0 *model.Voter
	if rf, ok := ret.Get(0).(func(types.Context, linotypes.AccountKey) *model.Voter); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Voter)
		}
	}

	var r1 types.Error
	if rf, ok := ret.Get(1).(func(types.Context, linotypes.AccountKey) types.Error); ok {
		r1 = rf(ctx, username)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(types.Error)
		}
	}

	return r0, r1
}

// GetVoterDuty provides a mock function with given fields: ctx, username
func (_m *VoteKeeper) GetVoterDuty(ctx types.Context, username linotypes.AccountKey) (votetypes.VoterDuty, types.Error) {
	ret := _m.Called(ctx, username)

	var r0 votetypes.VoterDuty
	if rf, ok := ret.Get(0).(func(types.Context, linotypes.AccountKey) votetypes.VoterDuty); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(votetypes.VoterDuty)
	}

	var r1 types.Error
	if rf, ok := ret.Get(1).(func(types.Context, linotypes.AccountKey) types.Error); ok {
		r1 = rf(ctx, username)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(types.Error)
		}
	}

	return r0, r1
}

// ImportFromFile provides a mock function with given fields: ctx, cdc, filepath
func (_m *VoteKeeper) ImportFromFile(ctx types.Context, cdc *amino.Codec, filepath string) error {
	ret := _m.Called(ctx, cdc, filepath)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.Context, *amino.Codec, string) error); ok {
		r0 = rf(ctx, cdc, filepath)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MinusStake provides a mock function with given fields: ctx, username, amount
func (_m *VoteKeeper) MinusStake(ctx types.Context, username linotypes.AccountKey, amount linotypes.Coin) types.Error {
	ret := _m.Called(ctx, username, amount)

	var r0 types.Error
	if rf, ok := ret.Get(0).(func(types.Context, linotypes.AccountKey, linotypes.Coin) types.Error); ok {
		r0 = rf(ctx, username, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Error)
		}
	}

	return r0
}

// SlashStake provides a mock function with given fields: ctx, username, amount
func (_m *VoteKeeper) SlashStake(ctx types.Context, username linotypes.AccountKey, amount linotypes.Coin) (linotypes.Coin, types.Error) {
	ret := _m.Called(ctx, username, amount)

	var r0 linotypes.Coin
	if rf, ok := ret.Get(0).(func(types.Context, linotypes.AccountKey, linotypes.Coin) linotypes.Coin); ok {
		r0 = rf(ctx, username, amount)
	} else {
		r0 = ret.Get(0).(linotypes.Coin)
	}

	var r1 types.Error
	if rf, ok := ret.Get(1).(func(types.Context, linotypes.AccountKey, linotypes.Coin) types.Error); ok {
		r1 = rf(ctx, username, amount)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(types.Error)
		}
	}

	return r0, r1
}

// StakeIn provides a mock function with given fields: ctx, username, amount
func (_m *VoteKeeper) StakeIn(ctx types.Context, username linotypes.AccountKey, amount linotypes.Coin) types.Error {
	ret := _m.Called(ctx, username, amount)

	var r0 types.Error
	if rf, ok := ret.Get(0).(func(types.Context, linotypes.AccountKey, linotypes.Coin) types.Error); ok {
		r0 = rf(ctx, username, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Error)
		}
	}

	return r0
}

// StakeInFor provides a mock function with given fields: ctx, sender, receiver, amount
func (_m *VoteKeeper) StakeInFor(ctx types.Context, sender linotypes.AccountKey, receiver linotypes.AccountKey, amount linotypes.Coin) types.Error {
	ret := _m.Called(ctx, sender, receiver, amount)

	var r0 types.Error
	if rf, ok := ret.Get(0).(func(types.Context, linotypes.AccountKey, linotypes.AccountKey, linotypes.Coin) types.Error); ok {
		r0 = rf(ctx, sender, receiver, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Error)
		}
	}

	return r0
}

// StakeOut provides a mock function with given fields: ctx, username, amount
func (_m *VoteKeeper) StakeOut(ctx types.Context, username linotypes.AccountKey, amount linotypes.Coin) types.Error {
	ret := _m.Called(ctx, username, amount)

	var r0 types.Error
	if rf, ok := ret.Get(0).(func(types.Context, linotypes.AccountKey, linotypes.Coin) types.Error); ok {
		r0 = rf(ctx, username, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Error)
		}
	}

	return r0
}

// UnassignDuty provides a mock function with given fields: ctx, username, waitingPeriodSec
func (_m *VoteKeeper) UnassignDuty(ctx types.Context, username linotypes.AccountKey, waitingPeriodSec int64) types.Error {
	ret := _m.Called(ctx, username, waitingPeriodSec)

	var r0 types.Error
	if rf, ok := ret.Get(0).(func(types.Context, linotypes.AccountKey, int64) types.Error); ok {
		r0 = rf(ctx, username, waitingPeriodSec)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Error)
		}
	}

	return r0
}
